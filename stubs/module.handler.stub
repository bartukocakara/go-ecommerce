package handler

import (
	"ecommerce/internal/dto"
	"ecommerce/internal/entity"
	"ecommerce/internal/service"
	"github.com/gofiber/fiber/v2"
)

type {{ .ModuleTitle }}Handler interface {
	Get{{ .ModuleTitle }}s(c *fiber.Ctx) error
	Get{{ .ModuleTitle }}ByID(c *fiber.Ctx) error
	Create{{ .ModuleTitle }}(c *fiber.Ctx) error
	Update{{ .ModuleTitle }}(c *fiber.Ctx) error
	Delete{{ .ModuleTitle }}(c *fiber.Ctx) error
}

type {{ .ModuleCamelTitle }}Handler struct {
	{{ .ModuleCamelTitle }}Service service.{{ .ModuleTitle }}Service
}

func New{{ .ModuleTitle }}Handler({{ .ModuleCamelTitle }}Service service.{{ .ModuleTitle }}Service) {{ .ModuleTitle }}Handler {
	return &{{ .ModuleCamelTitle }}Handler{
		{{ .ModuleCamelTitle }}Service: {{ .ModuleCamelTitle }}Service,
	}
}

func (h *{{ .ModuleCamelTitle }}Handler) Get{{ .ModuleTitle }}s(c *fiber.Ctx) error {
	page, perPage, err := validateQueryParams(c, "page", "per_page", 1, 10)
	if err != nil {
		return createErrorResponse(c, fiber.StatusBadRequest, "Invalid page number or per_page value")
	}

	// Parse and extract filter parameters from the request query
	filter := &dto.Filter{{ .ModuleTitle }}DTO{
		Name: c.Query("name", ""),
	}

	{{ .ModuleCamelTitle }}s, total, err := h.{{ .ModuleCamelTitle }}Service.Get{{ .ModuleTitle }}s(page, perPage, filter)
	if err != nil {
		return createErrorResponse(c, fiber.StatusInternalServerError, "Error fetching {{ .ModuleVar }}s")
	}

	var {{ .ModuleCamelTitle }}sInterfaceSlice []interface{}
	for _, {{ .ModuleCamelTitle }} := range {{ .ModuleCamelTitle }}s {
		{{ .ModuleCamelTitle }}sInterfaceSlice = append({{ .ModuleCamelTitle }}sInterfaceSlice, {{ .ModuleCamelTitle }})
	}

	return createPaginatedResponse(c, fiber.StatusOK, "OK", {{ .ModuleCamelTitle }}sInterfaceSlice, page, perPage, total)
}

func (h *{{ .ModuleCamelTitle }}Handler) Get{{ .ModuleTitle }}ByID(c *fiber.Ctx) error {
	id := parseIDParam(c)

	{{ .ModuleCamelTitle }}, err := h.{{ .ModuleCamelTitle }}Service.Get{{ .ModuleTitle }}ByID(id)
	if err != nil {
		return handleError(c, err)
	}

	return c.JSON({{ .ModuleCamelTitle }})
}

func (h *{{ .ModuleCamelTitle }}Handler) Create{{ .ModuleTitle }}(c *fiber.Ctx) error {
	{{ .ModuleCamelTitle }} := new(entity.{{ .ModuleTitle }})

	if err := parseBody(c, {{ .ModuleCamelTitle }}); err != nil {
		return handleError(c, err)
	}

	err := h.{{ .ModuleCamelTitle }}Service.Create{{ .ModuleTitle }}({{ .ModuleCamelTitle }})
	if err != nil {
		return handleError(c, err)
	}

	return c.JSON({{ .ModuleCamelTitle }})
}

func (h *{{ .ModuleCamelTitle }}Handler) Update{{ .ModuleTitle }}(c *fiber.Ctx) error {
	id := parseIDParam(c)
	{{ .ModuleCamelTitle }} := new(entity.{{ .ModuleTitle }})

	if err := parseBody(c, {{ .ModuleCamelTitle }}); err != nil {
		return handleError(c, err)
	}

	{{ .ModuleCamelTitle }}.ID = id

	err := h.{{ .ModuleCamelTitle }}Service.Update{{ .ModuleTitle }}({{ .ModuleCamelTitle }})
	if err != nil {
		return handleError(c, err)
	}

	return c.JSON({{ .ModuleCamelTitle }})
}

func (h *{{ .ModuleCamelTitle }}Handler) Delete{{ .ModuleTitle }}(c *fiber.Ctx) error {
	id := parseIDParam(c)

	err := h.{{ .ModuleCamelTitle }}Service.Delete{{ .ModuleTitle }}(id)
	if err != nil {
		return handleError(c, err)
	}

	return c.SendStatus(fiber.StatusNoContent)
}
