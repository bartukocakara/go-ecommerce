package service

import (
	"ecommerce/internal/dto"
	"ecommerce/internal/entity"
	"ecommerce/internal/repository"
)

type {{ .ModuleTitle }}Service interface {
	Show(id uint) (*entity.{{ .ModuleTitle }}, error)
	List(offset, limit int, filterDto *dto.Filter{{ .ModuleTitle }}DTO) ([]*entity.{{ .ModuleTitle }}, int, error)
	Create({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error
	Update({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error
	Delete(id uint) error
}

type {{ .ModuleCamelTitle }}Service struct {
	{{ .ModuleCamelTitle }}Repository repository.{{ .ModuleTitle }}Repository
}

func New{{ .ModuleTitle }}Service({{ .ModuleCamelTitle }}Repository repository.{{ .ModuleTitle }}Repository) {{ .ModuleTitle }}Service {
	return &{{ .ModuleCamelTitle }}Service{
		{{ .ModuleCamelTitle }}Repository: {{ .ModuleCamelTitle }}Repository,
	}
}

func (s *{{ .ModuleCamelTitle }}Service) List(offset, limit int, filter *dto.Filter{{ .ModuleTitle }}DTO) ([]*entity.{{ .ModuleTitle }}, int, error) {
	return s.{{ .ModuleCamelTitle }}Repository.List(offset, limit, filter)
}

func (s *{{ .ModuleCamelTitle }}Service) Show(id uint) (*entity.{{ .ModuleTitle }}, error) {
	{{ .ModuleCamelTitle }}, err := s.{{ .ModuleCamelTitle }}Repository.Show(id)
	if err != nil {
		// Handle error
		return nil, err
	}

	return {{ .ModuleCamelTitle }}, nil
}

func (s *{{ .ModuleCamelTitle }}Service) Create({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error {
	err := s.{{ .ModuleCamelTitle }}Repository.Create({{ .ModuleCamelTitle }})
	if err != nil {
		// Handle error
		return err
	}

	return nil
}

func (s *{{ .ModuleCamelTitle }}Service) Update({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error {
	err := s.{{ .ModuleCamelTitle }}Repository.Update({{ .ModuleCamelTitle }})
	if err != nil {
		// Handle error
		return err
	}

	return nil
}

func (s *{{ .ModuleCamelTitle }}Service) Delete(id uint) error {
	err := s.{{ .ModuleCamelTitle }}Repository.Delete(id)
	if err != nil {
		// Handle error
		return err
	}

	return nil
}
