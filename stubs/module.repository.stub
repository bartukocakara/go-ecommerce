package repository

import (
	"ecommerce/internal/dto"
	"ecommerce/internal/entity"

	"gorm.io/gorm"
)

type {{ .ModuleTitle }}Repository interface {
	List(offset, limit int, filter *dto.Filter{{ .ModuleTitle }}DTO) ([]*entity.{{ .ModuleTitle }}, int, error)
	Show(id uint) (*entity.{{ .ModuleTitle }}, error)
	Create({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error
	Update({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error
	Delete(id uint) error
}

type {{ .ModuleCamelTitle }}Repository struct {
	db *gorm.DB
}

func New{{ .ModuleTitle }}Repository(db *gorm.DB) {{ .ModuleTitle }}Repository {
	return &{{ .ModuleCamelTitle }}Repository{
		db: db,
	}
}

func (r *{{ .ModuleCamelTitle }}Repository) List(offset, limit int, filter *dto.Filter{{ .ModuleTitle }}DTO) ([]*entity.{{ .ModuleTitle }}, int, error) {
	var {{ .ModuleCamelTitle }}s []*entity.{{ .ModuleTitle }}

	db := r.db.Model(&entity.{{ .ModuleTitle }}{})

	if filter != nil {
		if filter.Name != "" {
			db = db.Where("name ILIKE ?", "%"+filter.Name+"%")
		}
	}
	count, err := CountTotal(db, {{ .ModuleCamelTitle }}s)
	if err != nil {
		return nil, 0, err
	}
	db = Paginate(db, offset, limit)

	if err := db.Find(&{{ .ModuleCamelTitle }}s).Error; err != nil {
		return nil, 0, err
	}

	return {{ .ModuleCamelTitle }}s, int(count), nil
}

func (r *{{ .ModuleCamelTitle }}Repository) Show(id uint) (*entity.{{ .ModuleTitle }}, error) {
	var {{ .ModuleCamelTitle }} entity.{{ .ModuleTitle }}
	result := r.db.First(&{{ .ModuleCamelTitle }}, id)
	if result.Error != nil {
		return nil, result.Error
	}
	return &{{ .ModuleCamelTitle }}, nil
}

func (r *{{ .ModuleCamelTitle }}Repository) Create({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error {
	result := r.db.Create({{ .ModuleCamelTitle }})
	if result.Error != nil {
		return result.Error
	}
	return nil
}

func (r *{{ .ModuleCamelTitle }}Repository) Update({{ .ModuleCamelTitle }} *entity.{{ .ModuleTitle }}) error {
	result := r.db.Save({{ .ModuleCamelTitle }})
	if result.Error != nil {
		return result.Error
	}
	return nil
}

func (r *{{ .ModuleCamelTitle }}Repository) Delete(id uint) error {
	result := r.db.Delete(id)
	if result.Error != nil {
		return result.Error
	}
	return nil
}
